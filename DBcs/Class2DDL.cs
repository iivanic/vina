using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Xml;

namespace DBcs;

public class Class2DDL
{
    public string GetDdl(Type[] types, string[] tableNames)
    {
        var ret = "";
        var cnt = 0;
        foreach (var type in types)
        {
            ret += $"{GetClassCodeString(type, tableNames[cnt])}{Environment.NewLine}";
            cnt++;
        }

        // second pass - now we can update 
        // referenced table names and their PKs
        foreach (var type in types)
        {
            var reg = new Regex(@"\w+\( -- table for: " + type.Name,
                RegexOptions.Multiline | RegexOptions.IgnoreCase);
            var typeName = type.Name;
            var tableNameMatch = reg.Match(ret);
            if (tableNameMatch.Success)
            {
                var tableName = tableNameMatch.Value.Split("(")[0];
                ret = ret.Replace($"##{type.Name}##", tableName);
                // now get pk pf referenced table
                //pk_questions primary key (XX),
                var pattern = @"pk_" + tableName + @" primary key \(\w+\)\,";
                var reg1 = new Regex(pattern,
                    RegexOptions.Multiline | RegexOptions.IgnoreCase);

                var pkNameMatch = reg1.Match(ret);
                if (pkNameMatch.Success)
                {
                    var pkName = pkNameMatch.Value.Split('(', ')')[1];
                    ret = ret.Replace($"##{type.Name}_PK##", $"{pkName}");
                }
            }
        }

        return ret;
    }

    private string GetClassCodeString(Type type, string tableName = "")
    {
        var ret = "";
        if (string.IsNullOrEmpty(tableName))
        {
            //try to get tablename from class attribute
            var attributes = type.GetCustomAttributes(true);
            foreach (var a in attributes)
                if (a is TableAttribute tableAttr)
                    tableName = tableAttr.Name;
        }

        // still no table name, use something
        if (string.IsNullOrEmpty(tableName)) tableName = $"table_{Utility.CamelToSnake(type.Name)}";

        ret = $"create table if not exists {tableName}( -- table for: {type.Name}{Environment.NewLine}";
        var propertyInfos = type.GetProperties();

        var constraints = "";
        foreach (var pi in propertyInfos)
        {
            var p = GetPropertyDDL(pi, tableName);
            ret += p.Column;
            constraints += p.Constraint;
        }
        // remove comma at the end 
        ret = $"{ret}{constraints}";
        if (ret.EndsWith($",{Environment.NewLine}"))
        {
            ret=ret.Substring(0,ret.Length-3);
        }
        ret += $"{Environment.NewLine});";
        return ret;
    }

    private ClassColumn GetPropertyDDL(PropertyInfo pi, string tableName)
    {
        var ret = new ClassColumn();
        var nullable = "";
        if (Utility.IsMarkedAsNullable(pi))
            nullable = "null";
        else
            nullable = "not null";
        ret.Column = $"   {Utility.CamelToSnake(pi.Name)}\t\t{GetDbType(pi.PropertyType)}\t\t{nullable}";
        // key anbd foreign key
        ret.Constraint = "";
        var attributes = pi.CustomAttributes;
        foreach (var a in attributes)
        {
            if (a.AttributeType == typeof(NotMappedAttribute))
                //skip  property
                return new ClassColumn();
            if (a.AttributeType == typeof(KeyAttribute))
            {
                ret.Constraint +=
                    $"   constraint pk_{tableName} primary key ({Utility.CamelToSnake(pi.Name)}),{Environment.NewLine}";
                ret.Column += " generated by default as identity";
            }

            if (a.AttributeType == typeof(ForeignKeyAttribute))
            {
                var referencedTableName = a.ConstructorArguments[0].Value;
                ret.Constraint +=
                    $"   constraint fk_{tableName}_##{referencedTableName}##_{tableName}_{Utility.CamelToSnake(pi.Name)} foreign key ({Utility.CamelToSnake(pi.Name)}){Environment.NewLine}" +
                    $"      references ##{referencedTableName}## (##{referencedTableName}_PK##) match simple{Environment.NewLine}" +
                    $"      on update no action{Environment.NewLine}" +
                    $"      on delete cascade,{Environment.NewLine}";
            }
        }

        ret.Column += $",{Environment.NewLine}";
        return ret;
    }

    private string GetDbType(Type type)
    {
        var ret = "json";
        if (type == typeof(int) || type == typeof(int?)) return "integer";
        if (type == typeof(bool) || type == typeof(bool?)) return "boolean";
        if (type == typeof(string)) return "text";
        if (type == typeof(long) || type == typeof(long?)) return "bigint";
        if (type == typeof(byte[])) return "bytea";
        if (type == typeof(float) || type == typeof(float?)) return "real";
        if (type == typeof(double) || type == typeof(double?)) return "double precision";
        if (type == typeof(short) || type == typeof(short?)) return "smallint";
        if (type == typeof(Guid) || type == typeof(Guid?)) return "uuid";
        if (type == typeof(DateTime) || type == typeof(DateTime?)) return "timestamp with time zone";
        if (type == typeof(string[]) ||
            type == typeof(List<string>) ||
            type == typeof(string?[]) ||
            type == typeof(List<string?>))
            return "text[]";
        if (type == typeof(TimeSpan) || type == typeof(TimeSpan?)) return "interval";
        if (type == typeof(XmlDocument) || type == typeof(XmlNode)) return "xml";
        return ret;
    }

    private record ClassColumn
    {
        public string Column = "";
        public string Constraint = "";
    }
}